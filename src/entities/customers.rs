//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "customers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    #[sea_orm(unique)]
    pub email: Option<String>,
    pub password: String,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::invoices::Entity")]
    Invoices,
    #[sea_orm(has_many = "super::meters::Entity")]
    Meters,
    #[sea_orm(has_many = "super::payments::Entity")]
    Payments,
}

impl Related<super::invoices::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Invoices.def()
    }
}

impl Related<super::meters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Meters.def()
    }
}

impl Related<super::payments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Payments.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
